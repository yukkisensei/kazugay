import os

import asyncio

import importlib

from dotenv import load_dotenv

import discord

from discord.ext import commands



load_dotenv()



DISCORD_TOKEN = os.getenv("DISCORD_TOKEN") or os.getenv("DISCORD_BOT_TOKEN")

print("DEBUG TOKEN START:", repr(DISCORD_TOKEN)[:40])



if not DISCORD_TOKEN:

    raise SystemExit("‚ùå Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong .env. Th√™m DISCORD_TOKEN=your_token_here")





# --- C√†i ƒë·∫∑t Intents ---

intents = discord.Intents.default()

intents.message_content = True

intents.guilds = True

intents.members = True



bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)



@bot.event

async def on_ready():

    print(f"‚úÖ Bot ready: {bot.user} (ID: {bot.user.id})")

    print("-" * 20)



async def safe_setup_module(name: str):

    """

    Th·ª≠ load module `name` theo nhi·ªÅu c√°ch:

    - N·∫øu module.setup(bot) c√≥ s·∫µn -> g·ªçi (h·ªó tr·ª£ c·∫£ coroutine)

    - N·∫øu module c√≥ class AI ho·∫∑c Lenh -> t·∫°o instance v√† add_cog

    - N·∫øu module c√≥ h√†m setup_commands -> g·ªçi (t∆∞∆°ng th√≠ch v·ªõi code c≈©)

    """

    try:

        module_name = name.replace(os.path.sep, '.')

        mod = importlib.import_module(module_name)

        print(f"üîÑ ƒêang t·∫£i module: {module_name}")

    except Exception as e:

        print(f" L·ªñI: Kh√¥ng th·ªÉ import module {name}: {e}")

        return



    # N·∫øu c√≥ setup(bot)

    if hasattr(mod, "setup"):

        try:

            maybe = mod.setup(bot)

            if asyncio.iscoroutine(maybe):

                await maybe

            print(f"  -> ƒê√£ g·ªçi setup() th√†nh c√¥ng cho {module_name}")

            return

        except Exception as e:

            print(f"  L·ªñI: khi g·ªçi setup() cho {module_name}: {e}")



    # N·∫øu c√≥ setup_commands (nh·ªØng code c≈©)

    if hasattr(mod, "setup_commands"):

        try:

            maybe = mod.setup_commands(bot)

            if asyncio.iscoroutine(maybe):

                await maybe

            print(f"  -> ƒê√£ g·ªçi setup_commands() (c≈©) th√†nh c√¥ng cho {module_name}")

            return

        except Exception as e:

            print(f"  L·ªñI khi g·ªçi {module_name}.setup_commands: {e}")



    # Th·ª≠ t√¨m class AI / Lenh ƒë·ªÉ add_cog

    for class_name in ("AI", "Lenh", "Commands", "Cog"):

        cls = getattr(mod, class_name, None)

        if cls and isinstance(cls, type):

            try:

                await bot.add_cog(cls(bot))

                print(f"  -> ƒê√£ th√™m cog {class_name} t·ª´ {module_name}")

                return

            except Exception as e:

                print(f"  L·ªñI: Kh√¥ng th·ªÉ add_cog {class_name} t·ª´ {module_name}: {e}")



    print(f"  C·∫¢NH B√ÅO: Module {module_name} ƒë∆∞·ª£c load nh∆∞ng kh√¥ng t√¨m th·∫•y h√†m setup / class cog ph√π h·ª£p.")



async def main():

    print("--- B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông bot ---")

    

    # Gi·ªØ l·∫°i c√°ch l√†m c≈© n·∫øu b·∫°n th√≠ch s·ª± ƒë∆°n gi·∫£n

    module_files = ["ai.py", "lenh.py"]



    for m_file in module_files:

        if os.path.exists(m_file):

            await safe_setup_module(m_file.replace(".py", ""))

        else:

            print(f"C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y file module '{m_file}', b·ªè qua.")

    

    print("-" * 20)

    # Kh·ªüi ƒë·ªông bot

    await bot.start(DISCORD_TOKEN)



if __name__ == "__main__":

    try:

        asyncio.run(main())

    except KeyboardInterrupt:

        print("\n--- Bot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng ---")



