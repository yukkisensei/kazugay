name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Public"
          netsh advfirewall firewall add rule name="RDP-Public" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          # Tạo mật khẩu ngẫu nhiên đáp ứng yêu cầu bảo mật của Windows
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 3
          $rawPassword += $charSet.Lower | Get-Random -Count 3
          $rawPassword += $charSet.Number | Get-Random -Count 3
          $rawPassword += $charSet.Special | Get-Random -Count 3
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
         
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install Ngrok for Public Tunnel
        run: |
          $ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
          $ngrokPath = "$env:TEMP\ngrok.zip"
          Invoke-WebRequest -Uri $ngrokUrl -OutFile $ngrokPath
          Expand-Archive -Path $ngrokPath -DestinationPath "C:\ngrok" -Force
          $env:Path += ";C:\ngrok"

      - name: Configure Ngrok with Auth Token
        run: |
          C:\ngrok\ngrok.exe authtoken ${{ secrets.NGROK_AUTHTOKEN }}

      - name: Create Ngrok Tunnel
        run: |
          # Đảm bảo không có tiến trình ngrok nào đang chạy
          Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
          Start-Sleep -Seconds 2

          # Khởi chạy Ngrok với log đầy đủ để debug
          $ngrokProcess = Start-Process -FilePath "C:\ngrok\ngrok.exe" -ArgumentList "tcp 3389 --log=stdout" -WindowStyle Hidden -PassThru
          
          # Chờ lâu hơn và kiểm tra trạng thái
          Start-Sleep -Seconds 10
          
          # Kiểm tra nếu tiến trình ngrok vẫn đang chạy
          if (-not (Get-Process -Id $ngrokProcess.Id -ErrorAction SilentlyContinue)) {
              Write-Error "Ngrok process failed to start"
              exit 1
          }

          # Thử kết nối đến API với nhiều lần retry
          $maxRetries = 10
          $retryCount = 0
          $tunnelInfo = $null
          
          while (-not $tunnelInfo -and $retryCount -lt $maxRetries) {
              try {
                  $tunnelInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
                  Write-Host "Successfully connected to Ngrok API"
              } catch {
                  Write-Host "Attempt $($retryCount + 1) failed: $($_.Exception.Message)"
                  $retryCount++
                  Start-Sleep -Seconds 5
              }
          }

          if ($tunnelInfo -and $tunnelInfo.tunnels) {
              $publicUrl = $tunnelInfo.tunnels[0].public_url
              echo "NGROK_PUBLIC_URL=$publicUrl" >> $env:GITHUB_ENV
              Write-Host "Public URL: $publicUrl"
          } else {
              Write-Error "Failed to create Ngrok tunnel after $maxRetries attempts"
              # Hiển thị thông tin tiến trình để debug
              Get-Process -Name "ngrok"
              exit 1
          }

      - name: Display Connection Information
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Ngrok Public URL: $env:NGROK_PUBLIC_URL"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS | split '|' -Last)"
          Write-Host "==================`n"

      - name: Maintain Connection
        run: |
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
