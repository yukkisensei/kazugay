name: Build CI

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 3600

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: Install base deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            git curl wget unzip build-essential software-properties-common \
            cmake pkg-config python3 python3-pip gnupg meson ninja-build \
            libwayland-dev wayland-protocols \
            libxkbcommon-dev libseat-dev \
            libdrm-dev libgles2-mesa-dev \
            libpixman-1-dev libvulkan-dev \
            libxcb1-dev libxcb-composite0-dev \
            libxcb-xfixes0-dev libxcb-render0-dev \
            libxcb-icccm4-dev libxcb-image0-dev \
            libxcb-util-dev libxcb-ewmh-dev \
            libxcb-present-dev libxcb-damage0-dev \
            libxcb-randr0-dev libxcb-xinput-dev \
            libxcb-xinerama0-dev libxcb-xkb-dev \
            libpugixml-dev hwdata \
            xwayland dbus-x11 openssl swaybg waybar xterm \
            libgbm-dev libudev-dev libevdev-dev libmtdev-dev libluajit-5.1-dev libwacom-dev \
            libgtk-3-dev libzip-dev librsvg2-dev \
            ccache > /dev/null

      - name: Build input stack
        run: |
          git clone -q https://gitlab.freedesktop.org/libinput/libinput.git
          cd libinput
          meson setup build --prefix=/usr
          ninja -C build > /dev/null
          sudo meson install -C build > /dev/null
          cd ..

      - name: Install altbrowser + chatapp
        run: |
          sudo curl -fsSLo /usr/share/keyrings/altbrowser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/altbrowser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" \
            | sudo tee /etc/apt/sources.list.d/altbrowser-release.list >/dev/null
          sudo apt-get update -qq
          sudo apt-get install -y -qq brave-browser > /dev/null
          wget -q -O chatapp.deb "https://discord.com/api/download?platform=linux&format=deb"
          sudo apt-get install -y -qq ./chatapp.deb > /dev/null
          rm -f chatapp.deb

      - name: Setup user
        run: |
          PASS=$(openssl rand -base64 12 | tr -dc 'A-Za-z0-9' | head -c16)
          sudo useradd -m -s /bin/bash kazugay
          echo "kazugay:$PASS" | sudo chpasswd
          echo "CI_USER=kazugay" >> $GITHUB_ENV
          echo "CI_PASS=$PASS" >> $GITHUB_ENV

      - name: Install compilers + build tools
        run: |
          wget -q https://apt.llvm.org/llvm.sh && chmod +x llvm.sh
          sudo ./llvm.sh 18 > /dev/null
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
          sudo apt-get update -qq
          sudo apt-get install -y -qq g++-13 > /dev/null
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 60
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-18 60
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-18 60

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          echo "CC=ccache clang-18" >> $GITHUB_ENV
          echo "CXX=ccache clang++-18" >> $GITHUB_ENV

      - name: Build dependencies + projects
        run: |
          git clone -q --depth=1 https://github.com/hyprwm/hyprwayland-scanner.git
          cd hyprwayland-scanner && cmake -B build -DCMAKE_CXX_STANDARD=20
          cmake --build build -j$(nproc) > /dev/null
          sudo cmake --install build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/hyprwm/hyprutils.git
          cd hyprutils && cmake -B build -DCMAKE_CXX_STANDARD=20
          cmake --build build -j$(nproc) > /dev/null
          sudo cmake --install build > /dev/null
          cd ..

          git clone -q --depth=1 https://gitlab.freedesktop.org/emersion/libdisplay-info.git
          cd libdisplay-info && meson setup build --prefix=/usr
          ninja -C build > /dev/null
          sudo meson install -C build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/hyprwm/aquamarine.git
          cd aquamarine && cmake -B build -DCMAKE_CXX_STANDARD=20
          cmake --build build -j$(nproc) > /dev/null
          sudo cmake --install build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/hyprwm/hyprcursor.git
          cd hyprcursor && cmake -B build -DCMAKE_CXX_STANDARD=20
          cmake --build build -j$(nproc) > /dev/null
          sudo cmake --install build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/hyprwm/hyprlang.git
          cd hyprlang
          meson setup build --prefix=/usr
          ninja -C build > /dev/null
          sudo meson install -C build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/marzer/tomlplusplus.git
          sudo mkdir -p /usr/include/toml++
          sudo cp -r tomlplusplus/include/* /usr/include/toml++/
          rm -rf tomlplusplus

      - name: Patch & Build WLComp
        run: |
          git clone -q --recursive https://github.com/hyprwm/Hyprland.git
          cd Hyprland
          # Patch all CMakeLists in repo + subprojects
          find . -type f -name "CMakeLists.txt" -exec sed -i '/pkg_check_modules.*hyprlang/d' {} +
          find . -type f -name "CMakeLists.txt" -exec sed -i '/pkg_check_modules.*tomlplusplus/d' {} +
          meson setup build --prefix=/usr
          ninja -C build > /dev/null
          sudo meson install -C build > /dev/null
          cd ..

          git clone -q --depth=1 https://github.com/any1/wayvnc.git
          cd wayvnc && meson setup build --prefix=/usr
          ninja -C build > /dev/null
          sudo meson install -C build > /dev/null
          cd ..

      - name: Configure WLComp env
        run: |
          USER=kazugay
          HOME=/home/$USER
          sudo -u $USER mkdir -p $HOME/.config/wlcomp
          echo "exec = swaybg -c \"#2e3440\"\nexec = waybar\nexec = xterm\nexec = brave-browser\nexec = discord" \
            | sudo -u $USER tee $HOME/.config/wlcomp/session.conf >/dev/null

      - name: Setup Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname=ci-${{ github.run_id }}

      - name: Start services
        run: |
          TS_IP=$(tailscale ip -4)
          echo "Address: $TS_IP"
          echo "Username: kazugay"
          echo "Password: $CI_PASS"
          echo "Port: 5900"
          sudo -u kazugay WLComp &
          echo $CI_PASS > /tmp/vncpass && chmod 600 /tmp/vncpass
          sudo -u kazugay wayvnc 0.0.0.0 5900 --passwordfile /tmp/vncpass &
          while true; do sleep 300; done
