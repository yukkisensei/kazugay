name: cache-windows-installers

on:
  workflow_dispatch:

env:
  INSTALLERS_DIR: installers
  INSTALLER_CACHE_KEY: installers-windows-v3

jobs:
  populate-cache:
    runs-on: windows-latest
    steps:
      - name: Restore installer cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.INSTALLERS_DIR }}
          key: ${{ env.INSTALLER_CACHE_KEY }}

      - name: Download installers
        if: steps.restore-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          function Invoke-Download {
            param(
              [Parameter(Mandatory = $true)][string[]]$Urls,
              [Parameter(Mandatory = $true)][string]$OutFile,
              [int]$Retries = 3
            )

            foreach ($url in $Urls) {
              for ($attempt = 1; $attempt -le $Retries; $attempt++) {
                try {
                  Invoke-WebRequest -Uri $url -OutFile $OutFile -ErrorAction Stop
                  if ((Test-Path $OutFile) -and ((Get-Item $OutFile).Length -gt 0)) {
                    return
                  }
                } catch {
                  if ($attempt -eq $Retries) {
                    Remove-Item -Path $OutFile -ErrorAction SilentlyContinue
                  }
                  Start-Sleep -Seconds ([math]::Pow(2, $attempt))
                }
              }
            }

            throw "Failed to download file after trying all URLs: $($Urls -join ', ')"
          }

          $target = Join-Path $env:GITHUB_WORKSPACE $env:INSTALLERS_DIR
          New-Item -ItemType Directory -Path $target -Force | Out-Null

          Invoke-Download -Urls @(
            'https://dl.discordapp.net/distro/app/stable/win/x64/DiscordSetup.exe',
            'https://dl.discordapp.net/apps/win/0.0.309/DiscordSetup.exe',
            'https://discord.com/api/download?platform=win&format=exe'
          ) -OutFile (Join-Path $target 'DiscordSetup.exe')

          Invoke-WebRequest -Uri 'https://laptop-updates.brave.com/latest/winx64' -OutFile (Join-Path $target 'BraveBrowserSetup.exe')

          $windsurfUrls = @()
          if ($env:WINDSURF_INSTALLER_URL) {
            $windsurfUrls += $env:WINDSURF_INSTALLER_URL
          }
          $windsurfUrls += @(
            'https://windsurf-stable.codeiumdata.com/win32-x64-user/stable/6a266ac3a91f80e64147aaf1e7640a92571474cf/WindsurfUserSetup-x64-1.12.16.exe',
            'https://download.windsurf.dev/WindsurfUserSetup-x64.exe',
            'https://windsurf-releases.s3.us-west-2.amazonaws.com/WindsurfUserSetup-x64.exe',
            'https://windsurf-releases.s3.amazonaws.com/WindsurfUserSetup-x64.exe'
          )

          Invoke-Download -Urls $windsurfUrls -OutFile (Join-Path $target 'WindsurfSetup.exe')

          Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi' -OutFile (Join-Path $target 'tailscale.msi')

      - name: Report cache status
        shell: pwsh
        run: |
          if ('${{ steps.restore-cache.outputs.cache-hit }}' -eq 'true') {
            Write-Host '::notice::Installer cache already populated.'
          } else {
            Write-Host '::notice::Installer cache created. Future runs can restore key:'
            Write-Host '::notice::${{ env.INSTALLER_CACHE_KEY }}'
